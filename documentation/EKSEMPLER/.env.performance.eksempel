# Performance Optimeret Konfiguration
# Dette eksempel er tunet for maksimal gennemstrømning og hurtig bog processering
# Fokus på høj concurrent processing og minimale API kald

# =============================================================================
# DATABASE KONFIGURATION
# =============================================================================
# Database optimeret til høj concurrent load
POSTGRES_HOST=postgres
POSTGRES_USER=postgres
POSTGRES_PASSWORD=high_performance_password_456
POSTGRES_PORT=5432
POSTGRES_DB=dhodb_performance

# Database connection pooling (hvis understøttet)
# POSTGRES_MAX_CONNECTIONS=50
# POSTGRES_CONNECTION_TIMEOUT=30

# =============================================================================
# EMBEDDING PROVIDER KONFIGURATION
# =============================================================================
# Ollama for høj gennemstrømning uden API rate limits
PROVIDER=ollama

# Ollama performance konfiguration
OLLAMA_BASE_URL=http://ollama:11434
OLLAMA_MODEL=nomic-embed-text

# Backup OpenAI for fallback (valgfri)
# OPENAI_API_KEY=your_backup_openai_key
# OPENAI_MODEL=text-embedding-3-small

# =============================================================================
# TEKST PROCESSERING KONFIGURATION
# =============================================================================
# Optimal chunk størrelse for balance mellem kvalitet og speed
CHUNK_SIZE=400

# Word overlap for maksimal parallelisering og konsistent størrelse
CHUNKING_STRATEGY=word_overlap

# =============================================================================
# PROCESSERING KONFIGURATION
# =============================================================================
# Input fil til stor batch processering
URL_FILE=large_batch_books.txt

# =============================================================================
# PERFORMANCE TUNING
# =============================================================================
# Høj concurrent processering
MAX_CONCURRENT_BOOKS=15

# Aggressiv batching
BATCH_SIZE=25
BATCH_TIMEOUT=10

# Optimeret memory management
CHUNK_CACHE_SIZE=1000
EMBEDDING_CACHE_TTL=3600

# =============================================================================
# LOGGING KONFIGURATION
# =============================================================================
# Reduceret logging for performance
LOG_LEVEL=WARNING
LOG_DIR=/var/log/dhodb

# Async logging (hvis implementeret)
# ASYNC_LOGGING=true
# LOG_BUFFER_SIZE=10000

# =============================================================================
# SØGEMASKINE API KONFIGURATION
# =============================================================================
# Standard production origins
TILLADTE_KALDERE=https://api.yourdomain.com,https://search.yourdomain.com

# Standard threshold
DISTANCE_THRESHOLD=0.5

# =============================================================================
# NETWORK OG I/O OPTIMERING
# =============================================================================

# Aggressive timeouts for faster failure recovery
API_TIMEOUT=15
CONNECTION_TIMEOUT=10
READ_TIMEOUT=20

# HTTP connection pooling
HTTP_POOL_SIZE=20
HTTP_POOL_MAXSIZE=50

# Retry strategier
MAX_RETRIES=2
RETRY_BACKOFF_FACTOR=0.5

# =============================================================================
# RESSOURCE LIMITS
# =============================================================================

# Memory limits for containers
MAX_MEMORY_USAGE=4GB
MEMORY_THRESHOLD_WARNING=80

# CPU optimering
CPU_CORES=4
WORKER_PROCESSES=8

# Disk I/O optimering
USE_SSD_CACHE=true
TEMP_DIR=/tmp/dhodb_fast

# =============================================================================
# MONITORING OG METRICS
# =============================================================================

# Performance metrics
ENABLE_PERFORMANCE_METRICS=true
METRICS_COLLECTION_INTERVAL=30

# Prometheus endpoints (hvis implementeret)
# PROMETHEUS_PORT=9090
# ENABLE_PROMETHEUS=true

# Health checks optimeret for høj load
HEALTH_CHECK_INTERVAL=30
HEALTH_CHECK_TIMEOUT=5

# =============================================================================
# CACHING STRATEGIER
# =============================================================================

# Redis caching (hvis implementeret)
# REDIS_HOST=redis
# REDIS_PORT=6379
# REDIS_DB=0
# ENABLE_EMBEDDING_CACHE=true

# Local caching
ENABLE_LOCAL_CACHE=true
LOCAL_CACHE_SIZE=500MB
CACHE_EVICTION_POLICY=LRU

# =============================================================================
# DATABASE PERFORMANCE TUNING
# =============================================================================

# PostgreSQL performance settings
# Disse bør sættes i postgresql.conf:
#
# shared_buffers = 256MB
# effective_cache_size = 1GB  
# work_mem = 4MB
# maintenance_work_mem = 64MB
# checkpoint_completion_target = 0.9
# wal_buffers = 16MB
# default_statistics_target = 100
# random_page_cost = 1.1
# effective_io_concurrency = 200

# Connection pooling via PgBouncer
# PGBOUNCER_HOST=pgbouncer
# PGBOUNCER_PORT=6432
# PGBOUNCER_POOL_SIZE=25

# =============================================================================
# OLLAMA PERFORMANCE OPTIMERING
# =============================================================================

# Ollama memory settings
# OLLAMA_MAX_MEMORY=4GB
# OLLAMA_CPU_THREADS=4

# Model preloading
# OLLAMA_PRELOAD_MODELS=nomic-embed-text

# Batch processing optimization
# OLLAMA_BATCH_SIZE=10
# OLLAMA_CONCURRENT_REQUESTS=5

# =============================================================================
# DISK OG STORAGE OPTIMERING
# =============================================================================

# SSD cache for frequent access
STORAGE_CACHE_PATH=/mnt/ssd/dhodb_cache
STORAGE_CACHE_SIZE=10GB

# Temporary files på hurtig storage
TMP_STORAGE_PATH=/mnt/nvme/dhodb_tmp

# Log rotation for disk space
LOG_ROTATION_SIZE=100MB
LOG_RETENTION_DAYS=7

# =============================================================================
# NETWORK OPTIMERING
# =============================================================================

# TCP optimization
TCP_KEEPALIVE=true
TCP_NODELAY=true

# DNS caching
ENABLE_DNS_CACHE=true
DNS_CACHE_TTL=300

# =============================================================================
# DEPLOYMENT ARCHITECTURE
# =============================================================================
# 
# Anbefalet infrastructure for højperformance:
#
# Load Balancer
#     ↓
# Multiple App Instances (3-5)
#     ↓
# PostgreSQL (med read replicas)
#     ↓
# Redis Cache Cluster
#     ↓
# Ollama Cluster (2-3 instances)
#
# Hardware anbefalinger:
# - App servers: 8 CPU cores, 16GB RAM, SSD storage
# - Database: 16 CPU cores, 32GB RAM, NVMe SSD
# - Ollama: 8 CPU cores, 16GB RAM, GPU optional
#
# Monitoring setup:
# - Prometheus + Grafana
# - Application metrics
# - Database performance metrics
# - System resource monitoring
# - Alert manager for critical thresholds

# =============================================================================
# PERFORMANCE BENCHMARKS
# =============================================================================
#
# Forventede performance targets med denne konfiguration:
#
# - Book processing: 50-100 bøger/time
# - Concurrent users: 100+ simultaneous searches  
# - API response time: <500ms 95th percentile
# - Database queries: <100ms average
# - Memory usage: <4GB per app instance
# - CPU usage: <70% average load
#
# Load testing kommandoer:
# ab -n 1000 -c 10 http://api.yourdomain.com/search
# wrk -t12 -c400 -d30s http://api.yourdomain.com/health
