# Debug og Udviklings Konfiguration
# Dette eksempel er optimeret til fejlsøgning, debugging og udvikling
# Maksimal logging og debugging information

# =============================================================================
# DATABASE KONFIGURATION
# =============================================================================
# Lokal database med debug indstillinger
POSTGRES_HOST=localhost
POSTGRES_USER=debug_user
POSTGRES_PASSWORD=debug123
POSTGRES_PORT=5432
POSTGRES_DB=dhodb_debug

# Database query logging
POSTGRES_LOG_QUERIES=true
POSTGRES_SLOW_QUERY_THRESHOLD=100ms

# =============================================================================
# EMBEDDING PROVIDER KONFIGURATION
# =============================================================================
# Dummy provider for deterministisk debugging
PROVIDER=dummy

# Men også test credentials for at teste validation
OPENAI_API_KEY=test-debug-key-12345
OPENAI_MODEL=text-embedding-3-small

# Ollama test konfiguration
OLLAMA_BASE_URL=http://localhost:11434
OLLAMA_MODEL=nomic-embed-text

# =============================================================================
# TEKST PROCESSERING KONFIGURATION
# =============================================================================
# Små chunks for lettere debugging
CHUNK_SIZE=150

# Sentence splitter for forudsigelige resultater
CHUNKING_STRATEGY=sentence_splitter

# =============================================================================
# PROCESSERING KONFIGURATION
# =============================================================================
# Debug input fil
URL_FILE=debug_test_books.txt

# =============================================================================
# LOGGING OG DEBUG KONFIGURATION
# =============================================================================
# Maksimal logging detail
LOG_LEVEL=DEBUG
LOG_DIR=./debug_logs

# Specialiseret debug logging
VERBOSE_LOGGING=true
TRACE_FUNCTION_CALLS=true
LOG_SQL_QUERIES=true

# Debug specific loggers
ASYNCIO_DEBUG=true
HTTP_DEBUG=true
DATABASE_DEBUG=true

# =============================================================================
# DEVELOPMENT TOOLS INTEGRATION
# =============================================================================
# Profiling og performance måling
ENABLE_PROFILING=true
PROFILE_OUTPUT_DIR=./debug_profiles

# Memory debugging
MEMORY_PROFILING=true
MEMORY_LEAK_DETECTION=true

# Code coverage tracking
COVERAGE_ENABLED=true
COVERAGE_OUTPUT_DIR=./debug_coverage

# =============================================================================
# FEJLSØGNINGS FUNKTIONER
# =============================================================================
# Detaljeret error reporting
DETAILED_ERROR_MESSAGES=true
INCLUDE_STACK_TRACES=true
DUMP_VARIABLES_ON_ERROR=true

# Debug breakpoints
ENABLE_DEBUGGER_HOOKS=true
BREAKPOINT_ON_ERROR=false  # Sæt til true for automatisk breakpoints

# Exception handling
RAISE_ON_WARNING=false
CONVERT_WARNINGS_TO_ERRORS=false

# =============================================================================
# DEVELOPMENT SERVER KONFIGURATION
# =============================================================================
# Hot reload og development features
DEVELOPMENT_MODE=true
HOT_RELOAD=true
AUTO_RESTART_ON_CHANGE=true

# Dev server indstillinger
DEV_SERVER_HOST=0.0.0.0
DEV_SERVER_PORT=8080
DEV_SERVER_DEBUG=true

# =============================================================================
# TEST DATA OG FIXTURES
# =============================================================================
# Test data generation
GENERATE_TEST_DATA=true
TEST_DATA_SIZE=small
USE_DETERMINISTIC_SEED=12345

# Test fixtures
LOAD_TEST_FIXTURES=true
TEST_FIXTURE_PATH=./test_data/debug_fixtures

# Mock services for debugging
USE_MOCK_SERVICES=true
MOCK_DELAY_MS=100

# =============================================================================
# API DEBUG INDSTILLINGER
# =============================================================================
# Liberal CORS for development
TILLADTE_KALDERE=*

# Debug endpoints aktiveret
ENABLE_DEBUG_ENDPOINTS=true
ENABLE_HEALTH_CHECKS=true
ENABLE_METRICS_ENDPOINT=true

# Lav threshold for debug searching
DISTANCE_THRESHOLD=0.1

# =============================================================================
# DEVELOPMENT WORKFLOW SUPPORT
# =============================================================================
# Watch file changes
WATCH_FILE_CHANGES=true
WATCHED_DIRECTORIES=create_embeddings,database,soegemaskine

# Auto-testing
AUTO_RUN_TESTS=false
TEST_ON_SAVE=false

# Code formatting
AUTO_FORMAT_CODE=true
FORMAT_ON_SAVE=true

# =============================================================================
# DEBUGGING TOOLS INTEGRATION
# =============================================================================
# Python debugger integration
PYTHON_DEBUGGER=ipdb
DEBUGGER_PORT=5678

# VS Code debugging
VSCODE_DEBUG_MODE=true
VSCODE_DEBUG_PORT=5679

# PyCharm debugging
PYCHARM_DEBUG_MODE=false
PYCHARM_DEBUG_PORT=5680

# =============================================================================
# PERFORMANCE DEBUGGING
# =============================================================================
# Timing alle operations
TIME_ALL_OPERATIONS=true
TIME_THRESHOLD_WARNING=1000ms

# SQL query analysis
ANALYZE_SQL_PERFORMANCE=true
SQL_EXPLAIN_THRESHOLD=500ms

# Memory usage tracking
TRACK_MEMORY_USAGE=true
MEMORY_USAGE_INTERVAL=10s

# =============================================================================
# NETWORK DEBUGGING
# =============================================================================
# HTTP request/response logging
LOG_HTTP_REQUESTS=true
LOG_HTTP_RESPONSES=true
LOG_HTTP_HEADERS=true

# Network timeout debugging
HTTP_TIMEOUT_DEBUG=true
CONNECTION_POOL_DEBUG=true

# DNS resolution debugging
DNS_DEBUG=true

# =============================================================================
# CONTAINER DEBUGGING
# =============================================================================
# Docker debugging support
DOCKER_DEBUG_MODE=true
DOCKER_COMPOSE_DEBUG=true

# Container health checks
CONTAINER_HEALTH_CHECK_INTERVAL=5s
CONTAINER_HEALTH_CHECK_TIMEOUT=3s

# Volume mounting for development
DEV_VOLUME_MOUNTS=./src:/app,./logs:/var/log

# =============================================================================
# DATABASE DEBUGGING
# =============================================================================
# Connection debugging
DATABASE_CONNECTION_DEBUG=true
CONNECTION_POOL_DEBUG=true

# Transaction debugging
TRANSACTION_DEBUG=true
DEADLOCK_DETECTION=true

# Index usage analysis
ANALYZE_INDEX_USAGE=true

# =============================================================================
# EMBEDDING DEBUGGING
# =============================================================================
# Embedding process debugging
EMBEDDING_DEBUG=true
DUMP_EMBEDDINGS=true
EMBEDDING_DIMENSION_CHECK=true

# Chunking debugging
CHUNKING_DEBUG=true
SAVE_CHUNKS_TO_FILE=true
CHUNK_ANALYSIS=true

# =============================================================================
# FRONTEND DEBUGGING SUPPORT
# =============================================================================
# CORS headers for debug
CORS_DEBUG=true
CORS_ALLOW_CREDENTIALS=true

# Detailed API responses
INCLUDE_DEBUG_INFO_IN_RESPONSES=true
INCLUDE_TIMING_INFO=true

# =============================================================================
# DEBUGGING SCENARIOS
# =============================================================================
# 
# Denne konfiguration understøtter debugging af:
#
# 1. Book processing pipeline
#    - Set breakpoints i opret_bøger.py
#    - Monitor chunk generation
#    - Trace embedding creation
#
# 2. Database operations
#    - SQL query logging
#    - Connection pool monitoring
#    - Transaction analysis
#
# 3. API endpoints
#    - Request/response logging
#    - CORS issues
#    - Authentication problems
#
# 4. Performance issues
#    - Memory usage tracking
#    - SQL query performance
#    - HTTP request timing
#
# 5. Configuration validation
#    - Cross-validation debugging
#    - Environment variable issues
#    - Provider setup problems

# =============================================================================
# DEBUG KOMMANDOER
# =============================================================================
#
# Start debug session:
# python -m ipdb create_embeddings/book_processor_wrapper.py --validate-config
#
# Debug med profiling:
# python -m cProfile -o debug.prof create_embeddings/opret_bøger.py
#
# Memory profiling:
# python -m memory_profiler create_embeddings/book_processor_wrapper.py
#
# Debug database:
# psql -h localhost -U debug_user -d dhodb_debug
#
# Test med debug logging:
# LOG_LEVEL=DEBUG python -m pytest create_embeddings/tests/ -v -s
#
# Debug Docker container:
# docker run -it --rm -v $(pwd):/app dhodb-debug bash
#
# Network debugging:
# tcpdump -i any -w debug_network.pcap host localhost and port 5432

# =============================================================================
# TROUBLESHOOTING GUIDE
# =============================================================================
#
# Almindelige debug scenarios:
#
# 1. Configuration validation fejl:
#    - Tjek LOG_LEVEL=DEBUG output
#    - Verificer alle miljøvariabler er sat
#    - Test cross-validation logic
#
# 2. Database connection problemer:
#    - Enable DATABASE_CONNECTION_DEBUG=true
#    - Tjek connection strings
#    - Verificer database server kører
#
# 3. Embedding generation fejl:
#    - Set EMBEDDING_DEBUG=true
#    - Tjek provider konfiguration
#    - Monitor API rate limits
#
# 4. Performance problemer:
#    - Enable ENABLE_PROFILING=true
#    - Monitor TIME_ALL_OPERATIONS output
#    - Check memory usage med TRACK_MEMORY_USAGE=true
#
# 5. Test failures:
#    - Brug VERBOSE_LOGGING=true
#    - Set DUMP_VARIABLES_ON_ERROR=true
#    - Check test fixtures med USE_DETERMINISTIC_SEED
