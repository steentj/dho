# Test og CI/CD Konfiguration
# Dette eksempel er optimeret til automatiserede tests og continuous integration
# Bruger dummy provider for hurtig og pålidelig testing

# =============================================================================
# DATABASE KONFIGURATION
# =============================================================================
# Test database (brug in-memory eller dedikeret test DB)
POSTGRES_HOST=localhost
POSTGRES_USER=test_user
POSTGRES_PASSWORD=test_password
POSTGRES_PORT=5433
POSTGRES_DB=test_dhodb

# For CI/CD pipelines med PostgreSQL service:
# POSTGRES_HOST=postgres
# POSTGRES_USER=postgres  
# POSTGRES_PASSWORD=postgres
# POSTGRES_DB=test_dhodb

# =============================================================================
# EMBEDDING PROVIDER KONFIGURATION
# =============================================================================
# Dummy provider for hurtige, deterministiske tests
PROVIDER=dummy

# Dummy provider behøver ingen API nøgler
# Men vi kan sætte test værdier for at teste validering
OPENAI_API_KEY=test-key-for-validation-testing
OPENAI_MODEL=text-embedding-3-small

# Ollama test konfiguration (hvis du vil teste Ollama integration)
# OLLAMA_BASE_URL=http://localhost:11434
# OLLAMA_MODEL=nomic-embed-text

# =============================================================================
# TEKST PROCESSERING KONFIGURATION
# =============================================================================
# Små chunks for hurtige tests
CHUNK_SIZE=200

# Sentence splitter for forudsigelige test resultater
CHUNKING_STRATEGY=sentence_splitter

# =============================================================================
# PROCESSERING KONFIGURATION
# =============================================================================
# Test input fil
URL_FILE=test_books.txt

# =============================================================================
# LOGGING KONFIGURATION
# =============================================================================
# Debug level for detaljeret test output
LOG_LEVEL=DEBUG
LOG_DIR=./test_logs

# For CI/CD: Brug WARNING for mindre verbose output
# LOG_LEVEL=WARNING

# =============================================================================
# SØGEMASKINE API KONFIGURATION
# =============================================================================
# Test origins
TILLADTE_KALDERE=http://localhost:8080,http://127.0.0.1:8080,http://testserver:8080

# Lav threshold for brede test resultater
DISTANCE_THRESHOLD=0.2

# =============================================================================
# TEST SPECIFIKKE INDSTILLINGER
# =============================================================================

# Hurtig test mode
FAST_TEST_MODE=true
MAX_CONCURRENT_BOOKS=2
API_TIMEOUT=5

# Test data generering
GENERATE_TEST_EMBEDDINGS=true
TEST_EMBEDDING_DIMENSION=768

# =============================================================================
# CI/CD PIPELINE KONFIGURATION
# =============================================================================

# GitHub Actions / Jenkins environment variabler
# CI=true
# TEST_RUNNER=pytest
# COVERAGE_THRESHOLD=80

# Docker test network
# DOCKER_NETWORK=test_network

# =============================================================================
# MOCK SERVICES KONFIGURATION
# =============================================================================

# Mock external APIs for integration tests
MOCK_OPENAI_API=true
MOCK_OLLAMA_API=true

# Test fixtures
USE_TEST_FIXTURES=true
TEST_FIXTURE_PATH=./test_data/fixtures

# =============================================================================
# TESTING SCENARIOS
# =============================================================================

# Denne konfiguration understøtter:
# 1. Unit tests med dummy provider
# 2. Integration tests med mock services  
# 3. Performance tests med små datasets
# 4. Configuration validation tests
# 5. Error handling tests

# Test kommandoer:
# pytest create_embeddings/tests/ -v
# pytest database/tests/ -v
# pytest --cov=create_embeddings --cov-report=html
# ./scripts/process_books.sh --validate

# =============================================================================
# PERFORMANCE TEST KONFIGURATION
# =============================================================================

# For load testing
PERFORMANCE_TEST_BOOKS=10
STRESS_TEST_CONCURRENT_USERS=5

# Memory og CPU limits for testing
# MAX_MEMORY_MB=512
# MAX_CPU_CORES=2

# =============================================================================
# TEST DATA MANAGEMENT
# =============================================================================

# Test database seeding
SEED_TEST_DATA=true
TEST_BOOKS_COUNT=5

# Cleanup after tests
CLEANUP_AFTER_TESTS=true
PRESERVE_TEST_LOGS=false

# Test PDF URLs (bruger placeholder/test URLs)
TEST_PDF_URLS="https://httpbin.org/json,https://httpbin.org/xml"

# =============================================================================
# DEBUGGING TEST FAILURES
# =============================================================================

# Enable extra debugging for test failures
VERBOSE_TEST_OUTPUT=true
DUMP_TEST_STATE=true
PRESERVE_FAILED_TEST_DATA=true

# Test isolation
RESET_DB_BETWEEN_TESTS=true
CLEAR_LOGS_BETWEEN_TESTS=false

# =============================================================================
# CONTINUOUS INTEGRATION NOTES
# =============================================================================
# 
# GitHub Actions eksempel workflow:
# 
# env:
#   POSTGRES_HOST: postgres
#   POSTGRES_USER: postgres
#   POSTGRES_PASSWORD: postgres
#   POSTGRES_DB: test_dhodb
#   PROVIDER: dummy
#   LOG_LEVEL: WARNING
#
# services:
#   postgres:
#     image: postgres:13
#     env:
#       POSTGRES_PASSWORD: postgres
#       POSTGRES_DB: test_dhodb
#     options: >-
#       --health-cmd pg_isready
#       --health-interval 10s
#       --health-timeout 5s
#       --health-retries 5
#
# Docker Compose test services:
# docker-compose -f docker-compose.test.yml up -d
# ./scripts/run_tests.sh
# docker-compose -f docker-compose.test.yml down
